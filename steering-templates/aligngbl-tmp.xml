<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Wed Jan 30 17:48:52 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
     <processor name="MyAIDAProcessor"/>
     <processor name="LoadPreAlignment"/>
     <processor name="MyEUTelApplyAlignmentProcessor"/>
     <processor name="MyEUTelMilleGBL"/>
   </execute>

   <global>
     <parameter name="LCIOInputFiles">@LcioPath@/run@RunNumber@-hitmaker.slcio </parameter>
     <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
     <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
     <parameter name="SkipNEvents" value="0"/>
     <parameter name="SupressCheck" value="false"/>
     <parameter name="Verbosity" value="MESSAGE"/>
   </global>

   <processor name="MyAIDAProcessor" type="AIDAProcessor">
     <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
     <!-- compression of output file 0: false >0: true (default) -->
     <parameter name="Compress" type="int">1 </parameter>
     <!-- filename without extension-->
     <parameter name="FileName" type="string"> @HistogramPath@/run@RunNumber@-align-db </parameter>
     <!-- type of output file root (default) or xml )-->
     <parameter name="FileType" type="string">root </parameter>
     <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
     <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
   </processor>

   <processor name="LoadPreAlignment" type="ConditionsProcessor">
     <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
     <!--Initialization of a conditions database handler-->
     <!--parameter name="DBCondHandler" type="StringVec">conditionsName /lccd/myfolder HEAD  </parameter-->
     <!--Initialization of a conditions db file handler-->
     <!--parameter name="DBFileHandler" type="StringVec">conditionsName conditions.slcio collectionName  </parameter-->
     <!--Initialization string for conditions database-->
     <!-- <parameter name="DBInit" type="string">localhost:lccd_test:calvin:hobbes </parameter> -->
     <!--Initialization of a data file handler-->
     <!--parameter name="DataFileHandler" type="StringVec">conditionsName  </parameter-->
     <!--Initialization of a simple conditions file handler-->
     <parameter name="SimpleFileHandler" type="StringVec">prealign @DatabasePath@/run@RunNumber@-prealign-db.slcio alignment   </parameter>
     <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
     <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
   </processor>

   <processor name="MyEUTelApplyAlignmentProcessor" type="EUTelApplyAlignmentProcessor">
     <!--Apply to the input hit the alignment corrections-->
     <!--Alignment constant from the condition file-->
     <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> prealign </parameter>
     <!--Rotation Angle around X axis-->
     <!--parameter name="Alpha" type="double">0 </parameter-->
     <!--Available directions are:
		   0 -> direct  
     1 -> reverse -->
     <parameter name="ApplyAlignmentDirection" type="int">0 </parameter>
     <!--Do you want the reference hit collection to be corrected by the shifts and tilts from the alignment collection?-->
     <parameter name="ApplyToReferenceCollection" type="bool">false </parameter>
     <!--Rotation Angle around Y axis-->
     <!--parameter name="Beta" type="double">0 </parameter-->
     <!--Available methods are:
		   0 -> shift only 
     1 -> rotation first 
     2 -> shift first -->
     <parameter name="CorrectionMethod" type="int">1 </parameter>
     <!--Enable or disable DEBUG mode -->
     <!--parameter name="DEBUG" type="bool">false </parameter-->
     <!--Implement geometry shifts and rotations as described in alignmentCollectionName -->
     <parameter name="DoAlignCollection" type="bool">true </parameter>
     <!--Apply alignment steps in one go. Is supposed to be used for reversealignment in reverse order, like: undoAlignment, undoPreAlignment, undoGear -->
     <!--parameter name="DoAlignmentInOneGo" type="bool">false </parameter-->
     <!--Implement geometry shifts and rotations as described in GEAR steering file -->
     <!--parameter name="DoGear" type="bool">false </parameter-->
     <!--Rotation Angle around Z axis-->
     <!--parameter name="Gamma" type="double">0 </parameter-->
     <!--Enable or disable histograms-->
     <!--parameter name="HistogramSwitch" type="bool">false </parameter-->
     <!--The name of the input hit collection-->
     <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
     <!--The name of the output hit collection-->
     <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> PreAlignedHit </parameter>
     <!--This is the name of the modified output reference hit collection-->
     <!--parameter name="OutputReferenceCollection" type="string">output_refhit </parameter-->
     <!--Events number to have DEBUG1 printed outs (default=10)-->
     <parameter name="PrintEvents" type="int">5 </parameter>
     <!--This is the name of the reference hit collection-->
     <!--parameter name="ReferenceCollection" type="string">referenceHit </parameter-->
     <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
     <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
     <!--List of alignment collections that were applied to the DUT-->
     <parameter name="alignmentCollectionNames" type="StringVec"> prealign  </parameter>
     <!--List of hit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
     <parameter name="hitCollectionNames" type="StringVec">hitCollectionNames  </parameter>
     <!--List of refhit collections. First one is INPUT collection, every subsequent corresponds to applying alignment collection-->
     <parameter name="refhitCollectionNames" type="StringVec">hitCollectionNames  </parameter>
   </processor>

   <processor name="MyEUTelMilleGBL" type="EUTelMilleGBL">
     <!--EUTelMilleGBL uses the MILLE program to write data files for MILLEPEDE II.-->
     <!--Number of alignment constants used. Available mode are: 
		XYZShifts - shifts in X and Y
		XYShiftsRotZ - shifts in X and Y and rotation around the Z axis,
		XYZShiftsRotZ - shifts in X,Y and Z and rotation around the Z axis-->
     <parameter name="AlignMode" type="string">XYZShiftsRotZ </parameter>
     <!--This is the name of the alignment collection to be saved into the slcio file-->
     <!--parameter name="AlignmentConstantCollectionName" type="string">alignment </parameter-->
     <!--This is the name of the LCIO file name with the output alignmentconstants (add .slcio)-->
     <parameter name="AlignmentConstantLCIOFile" type="string">@DatabasePath@/run@RunNumber@-align-db.slcio </parameter>
     <!--Name of the Millepede binary file.-->
     <parameter name="BinaryFilename" type="string">@LcioPath@/@RunNumber@-tel-align-mille.bin </parameter>
     <!--Beam energy [GeV]-->
     <parameter name="Ebeam" type="double">5.6 </parameter>
     <!--Exclude planes from fit according to their sensor ids.-->
     <!-- <parameter name="ExcludePlanes" type="IntVec"> @ExcludePlanes@ </parameter> -->
     <!-- <parameter name="ExcludePlanes" type="IntVec"> 7 </parameter> -->
     <!--Fix sensor planes in the fit according to their sensor ids.-->
     <parameter name="FixedPlanes" type="IntVec"> @FixedPlanes@ </parameter>
     <!--Generate a steering file for the pede program.-->
     <parameter name="GeneratePedeSteerfile" type="int">1 </parameter>
     <!--Hit collections name-->
     <parameter name="HitCollectionName" type="StringVec" lcioInType="TrackerHit"> PreAlignedHit  </parameter>
     <!--Selects the source of input hits.
		 0 - hits read from hitfile with simple trackfinding. 
		 1 - hits read from output of tracking processor. 
		 2 - Test mode. Simple internal simulation and simple trackfinding. 
		 3 - Mixture of a track collection from the telescope and hit collections for the DUT (only one DUT layer can be used unfortunately)-->
     <parameter name="InputMode" type="int">0 </parameter>
     <!--Bool: yes/no-->
     <parameter name="IsFirstAlignStep" type="int">0 </parameter>
     <!--Maximal number of track candidates.-->
     <parameter name="MaxTrackCandidates" type="int">10000 </parameter>
     <!--Maximal number of track candidates (Total).-->
     <parameter name="MaxTrackCandidatesTotal" type="int">10000000  </parameter>
     <!--Name of the steering file for the pede program.-->
     <parameter name="PedeSteerfileName" type="string">@LcioPath@/@RunNumber@-tel-pede-steer.txt</parameter>
     <!--Execute the pede program using the generated steering file.-->
     <parameter name="RunPede" type="int"> @RunPede@ </parameter>
     <!--Resolution of the telescope for Millepede (sigma_x=sigma_y.-->
     <parameter name="TelescopeResolution" type="float">10 </parameter>
     <!--Rotation around the x axis of the sensors in test mode (to be determined by the alignment).-->
     <!--parameter name="TestModeSensorAlpha" type="FloatVec">0 0 0 0 0 0  </parameter-->
     <!--Rotation around the y axis of the sensors in test mode (to be determined by the alignment).-->
     <!--parameter name="TestModeSensorBeta" type="FloatVec">0 0 0 0 0 0  </parameter-->
     <!--Rotation around the z axis of the sensors in test mode (to be determined by the alignment).-->
     <!--parameter name="TestModeSensorGamma" type="FloatVec">0 0 0 0 0 0  </parameter-->
     <!--Resolution assumed for the sensors in test mode.-->
     <!--parameter name="TestModeSensorResolution" type="float">0.003 </parameter-->
     <!--X shifts of the sensors in test mode (to be determined by the alignment).-->
     <!--parameter name="TestModeSensorXShifts" type="FloatVec">0 0 0 0 0 0  </parameter-->
     <!--Y shifts of the sensors in test mode (to be determined by the alignment).-->
     <!--parameter name="TestModeSensorYShifts" type="FloatVec">0 0 0 0 0 0  </parameter-->
     <!--Z positions of the sensors in test mode.-->
     <!--parameter name="TestModeSensorZPositions" type="FloatVec">20000 40000 60000 80000 100000 120000  </parameter-->
     <!--Width of the track slope distribution in the x direction-->
     <!--parameter name="TestModeXTrackSlope" type="float">0.0005 </parameter-->
     <!--Width of the track slope distribution in the y direction-->
     <!--parameter name="TestModeYTrackSlope" type="float">0.0005 </parameter-->
     <!--Do not use all pixels for alignment, only these in the rectangular (A|B) e.g. (0,0) and (C|D) e.g. (100|100) of sensor S. Type in the way S1 A1 B1 C1 D1 S2 A2 B2 C2 D2 ...-->
     <!--parameter name="UseSensorRectangular" type="IntVec"> </parameter-->
     <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
     <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
     <!--Downstream triplet residual cut [um]-->
     <parameter name="driCut" type="double">  @DripletCut@ </parameter>
     <!--global factor to Highland formula-->
     <parameter name="kappa" type="double">1 </parameter>
     <!--Upstream-Downstream Track matching cut [um]-->
     <parameter name="sixCut" type="double"> @SixCut@ </parameter>
     <!--t(d)riplet slope cut [radian]-->
     <!--parameter name="slopeCut" type="double">0.01 </parameter-->
     <!--target thickness in um-->
     <parameter name="targetthick" type="double">0 </parameter>
     <!--Upstream triplet residual cut [um]-->
     <parameter name="triCut" type="double">@TripletCut@ </parameter>
   </processor>

</marlin>
